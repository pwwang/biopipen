name: CI

on:
  push:
  release:
    types: [published]

jobs:

  build:
    runs-on: ubuntu-latest
    if: github.event_name != 'release'
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v4

      - uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: "3.10"
          auto-update-conda: true
          activate-environment: mybase
          channels: conda-forge,defaults
          # mamba-version: "*"
          # miniforge-variant: Mambaforge

      - name: Change conda envs permissions
        # https://github.com/actions/cache/issues/133
        run: |
          sudo chown -R $USER $CONDA/envs
          sudo chmod -R 0777 $CONDA/envs

      - name: Restore conda environments
        id: restore-conda
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CONDA }}/envs/
          key: conda-${{ hashFiles('tests/conda/env_*.yml') }}-${{ env.CACHE_NUMBER }}
        env:
          TAR_OPTIONS: "--no-same-owner --no-same-permissions"
          CACHE_NUMBER: 1

      - name: Create conda environments (if not cached)
        if: steps.restore-conda.outputs.cache-hit != 'true'
        run: |
          for envfile in tests/conda/env_*.yml; do
            bname=$(basename $envfile .yml)
            envname=${bname:4}
            echo "::group::Creating environment: $envname"
            conda env create --file=$envfile
            echo "::endgroup::"
          done

      - name: Save conda environments
        id: save-conda
        if: steps.restore-conda.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CONDA }}/envs/
          key: ${{ steps.restore-conda.outputs.cache-primary-key }}

      - name: List conda information
        run: |
          conda info
          conda env list

      - name: Install biopipen in conda environments
        run: |
          for envfile in tests/conda/env_*.yml; do
            bname=$(basename $envfile .yml)
            envname=${bname:4}
            echo "::group::Installing biopipen in environment: $envname"
            conda run --no-capture-output -n $envname poetry install -E runinfo -v
            echo "::endgroup::"
          done

      - name: Restore reference data
        id: restore-reference
        uses: actions/cache/restore@v4
        with:
          path: tests/data
          key: reference-${{ hashFiles('tests/data/prep_data.py') }}-${{ env.CACHE_NUMBER }}
        env:
          CACHE_NUMBER: 1

      - name: Prepare reference data
        if: steps.restore-reference.outputs.cache-hit != 'true'
        run: |
          conda run --no-capture-output -n biopipen python tests/data/prep_data.py

      - name: Save reference data
        id: save-reference
        if: steps.restore-reference.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: tests/data
          key: ${{ steps.restore-reference.outputs.cache-primary-key }}

      - name: Run tests
        run: |
          make --keep-going all VERBOSE=true

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python # Set Python version
        uses: actions/setup-python@v5
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
      - name: Publish to PyPI
        run: poetry publish --build -u ${{ secrets.PYPI_USER }} -p ${{ secrets.PYPI_PASSWORD }}
        if: success()
